// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract HouseRivalryProtocol is Ownable {
    IERC20 public ornamintsToken;

    struct Competition {
        uint256 entryFee;
        bool isActive;
        address[] houseMultisigs;
    }

    Competition[] public competitions;

    // Events
    event CompetitionCreated(uint256 indexed competitionId, uint256 entryFee);
    event HouseEnteredCompetition(uint256 indexed competitionId, address houseMultisig);
    event CompetitionResolved(uint256 indexed competitionId, address winningHouse);

    // Constructor
    constructor(IERC20 _ornamintsToken) {
        ornamintsToken = _ornamintsToken;
    }

    // Create a new competition
    function createCompetition(uint256 entryFee) external onlyOwner {
        competitions.push(Competition(entryFee, true, new address[](0)));
        emit CompetitionCreated(competitions.length - 1, entryFee);
    }

    // House enters a competition
    function enterCompetition(uint256 competitionId) external {
        require(competitions[competitionId].isActive, "Competition not active");
        ornamintsToken.transferFrom(msg.sender, address(this), competitions[competitionId].entryFee);
        competitions[competitionId].houseMultisigs.push(msg.sender);
        emit HouseEnteredCompetition(competitionId, msg.sender);
    }

    // Resolve a competition
    function resolveCompetition(uint256 competitionId, address winningHouse) external onlyOwner {
        require(competitions[competitionId].isActive, "Competition not active");
        competitions[competitionId].isActive = false;
        uint256 prizePool = competitions[competitionId].entryFee * competitions[competitionId].houseMultisigs.length;
        ornamintsToken.transfer(winningHouse, prizePool);
        emit CompetitionResolved(competitionId, winningHouse);
    }
}
